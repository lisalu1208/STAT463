knitr::opts_chunk$set(echo = TRUE)
#Generate a ficticious dataset
M<-rnorm(500)
F<-rnorm(500)
s<-sort(rep(0:1,250))
y<-0.5*M+0.5*F + 4*s + rnorm(500,0,sd=0.4)
data=data.frame(y=y,M=M,F=F,S=s)
data$S<-as.factor(data$S)
mod<-lm(y~M+F+S,data=data)
summary(mod)
confint(mod)
#Step One: create the predictor matrix.
X= cbind(1,data$M,data$F,data$S)
#Step Two: Estimate beta, (X'X)^{-1}X'y
XTX=crossprod(X)
XTXinv=solve(XTX)
XTy=crossprod(X,y)
betahat = XTXinv%*%XTy;betahat
#We have a problem, R read the factor as a vector of ones and twos, when we wanted it to be a vector of zero and ones.
#HENCE, IF YOU TURNED THE CATEGORICAL VARIABLE (such as Sex) INTO a FACTOR IN THE DATASET ITSELF
#you can check if you did this by going
class(data$S)
#subtract one from the column of the factor variable after the cbind operation.
#In this example, the fourth column is the factor variable
#then results will match.
X= cbind(1,data$M,data$F,data$S)
X[,4]<-X[,4]-1
#IF YOU DID NOT CHANGE THE CLASS OF THE CATEGORICAL VARIABLE TO  FACTOR IN THE DATASET, YOU COULD IGNORE THIS.
#Step Two: Estimate beta, (X'X)^{-1}X'y
XTX=crossprod(X)
XTXinv=solve(XTX)
XTy=crossprod(X,y)
betahat = XTXinv%*%XTy;betahat
#The confidence interval  is
#estimate +- Multipler X std error
#We have four estimates, betahat[1], [2], [3], [4].
#We need the 95=100(1-0.05) % multipler if you want a 95 % confidence interval.
n=dim(X)[1]
p<-dim(X)[2]
Mult<-qt(1-0.05/2,df=n-p)
#vbeta = sigma^2_hat XTXinv
#To calculate sigma^2_hat
sigma2hat= sum((y-X%*%betahat)^2)/(n-p)
vbeta= sigma2hat*XTXinv
Stderror = sqrt(diag(vbeta))
#CI for the first coefficient
betahat[1]+c(-1,1)*Mult*Stderror[1]
confint(mod,level =0.95) #check that result matches.
knitr::opts_chunk$set(echo = TRUE)
# Read in the data
dataset <- read.csv("USJudgeRatings.csv")
# Standardise the ratings
library(dplyr)
dataset_std <- dataset %>% mutate(across(where(is.numeric),scale))
summary(dataset_std)
sapply(dataset[,-1], var)
pca <- prcomp(dataset_std[,-1])
screeplot(pca)
biplot(pca)
summary(pca)
factor3 <- factanal(dataset_std[,-1], factors = 3, rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std[,-1], factors = 4, rotation = "none");factor4
factanal(dataset_std[,-1], factors = 3, rotation = "varimax", control=list(nstart=100))
# Standardise the ratings
library(dplyr , quietly = T)
# Perform Pricipal Component Analysis on the standardised dataset
pca <- prcomp(dataset_std[,-1])
# Use the scree plot
screeplot(pca)
pca$sdev
variance_explained <- pca$sdev^2 / sum(pca$sdev^2) * 100
variance_explained
View(variance_explained)
summary(variance_explained)
# Get the percentage of variance explained by each component
variance_explained <- pca$sdev^2 / sum(pca$sdev^2) * 100
variance_explained
summary(pca)
# Get the percentage of variance explained by each component
summary(pca$sdev)
# Get the percentage of variance explained by each component
summary(pca)
pca$x
head(pca)
pca$loadings[,1:2]
pca$rotation
pca$rotation[,1:4]
pca$rotation[,1]
pca$rotation[,1:1]
pca$rotation[1]
pca$rotation[,1]
summary(dataset_std)
pca$rotation[, 2]
pca$rotation[2, ]
pca$rotation[, 2]
pca$rotation[, 1:2]
pca$rotation[1:2, ]
pca$rotation[, 1:2]
knitr::opts_chunk$set(echo = TRUE)
# Read in the data
dataset <- read.csv("USJudgeRatings.csv")
# Standardise the ratings
library(dplyr , quietly = T)
dataset_std <- dataset %>% mutate(across(where(is.numeric),scale))
summary(dataset_std)
# Perform Pricipal Component Analysis on the standardised dataset
pca <- prcomp(dataset_std[,-1])
# Use the scree plot
screeplot(pca)
# Get the percentage of variance explained by each component
summary(pca)
pca$rotation[, 1:2]
factor3 <- factanal(dataset_std[,-1], factors = 3, rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std[,-1], factors = 4, rotation = "none");factor4
factanal(dataset_std[,-1], factors = 3, rotation = "varimax", control=list(nstart=100))
dataset_std$INTG <- dataset_std$INTG * 5
dataset_std
# Standardise the ratings
library(dplyr , quietly = T)
dataset_std <- dataset %>% mutate(across(where(is.numeric),scale))
summary(dataset_std)
dataset_std$INTG
dataset_std$INTG <- dataset_std$INTG * 5
dataset_std$INTG
summary(dataset_std)
dataset_std$DMNR <- dataset_std$DMNR * 5
knitr::opts_chunk$set(echo = TRUE)
# Read in the data
dataset <- read.csv("USJudgeRatings.csv")
# Standardise the ratings
library(dplyr , quietly = T)
dataset_std <- dataset %>% mutate(across(where(is.numeric),scale))
summary(dataset_std)
# Perform Pricipal Component Analysis on the standardised dataset
pca <- prcomp(dataset_std[,-1])
# Use the scree plot
screeplot(pca)
# Get the percentage of variance explained by each component
summary(pca)
pca$rotation[, 1:2]
# Apply weights to INTG and DMNR
dataset_weighed <- dataset_std
dataset_weighed$INTG <- dataset_std$INTG * 5
dataset_weighed$DMNR <- dataset_std$DMNR * 5
# Run the principal component analysis on the weighed dataset
pca1 <-
View(dataset_std)
View(dataset_std)
# Run the principal component analysis on the weighed dataset
pca1 <- prcomp(dataset_weighed[,-1])
pca1
summary(pca1)
pca1$rotation[, 1:3]
summary(pca1)
summary(pca1)
pca1$rotation[, 1:3]
factor3 <- factanal(covmat = dataset_std[,-1], factors = 3, rotation = "none", n.obs= 43, control=list(nstart=100));factor3
factor4 <- factanal(dataset_std[,-1], factors = 4, rotation = "none");factor4
factor4 <- factanal(covmat = dataset_std[,-1], factors = 4, rotation = "none", n.obs = 43);factor4
factor3 <- factanal(covmat = dataset_std[,-1], factors = 3, rotation = "none", n.obs= 43, control=list(nstart=100));factor3
dataset_std_cov <- cov(dataset_std)
dataset_std_cov <- cov(dataset_std[,-1])
dataset_std_cov
factor3 <- factanal(covmat = dataset_std_cov, factors = 3, rotation = "none", n.obs= 43, control=list(nstart=100));factor3
factor4 <- factanal(covmat = dataset_std_cov, factors = 4, rotation = "none", n.obs = 43);factor4
factor3 <- factanal(dataset_std[,-1], factors = 3, rotation = "none", control=list(nstart=100));factor3
factor3 <- factanal(dataset_std[,-1], factors = 3, rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std[-1], factors = 4, rotation = "none");factor4
dataset_std1 <- scale(dataset[,-1])
summary(dataset_std1)
summary(dataset)
summary(dataset)
summary(dataset_std1)
summary(dataset_std)
summary(dataset_std1)
# Standardise the ratings
dataset_std <- scale(dataset[,-1])
# Perform Pricipal Component Analysis on the standardised dataset
pca <- prcomp(dataset_std[,-1])
# Use the scree plot
screeplot(pca)
# Get the percentage of variance explained by each component
summary(pca)
pca$rotation[, 1:2]
# Apply weights to INTG and DMNR
dataset_weighed <- dataset_std
dataset_weighed$INTG <- dataset_std$INTG * 5
class(dataset_std1)
dataset_std1 <- data.frame(scale(dataset[,-1]))
class(dataset_std1)
# Standardise the ratings
# library(dplyr , quietly = T)
#dataset_std <- dataset %>% mutate(across(where(is.numeric),scale))
dataset_std <- data.frame(scale(dataset[,-1]))
# Perform Pricipal Component Analysis on the standardised dataset
pca <- prcomp(dataset_std[,-1])
# Use the scree plot
screeplot(pca)
# Get the percentage of variance explained by each component
summary(pca)
pca$rotation[, 1:2]
# Apply weights to INTG and DMNR
dataset_weighed <- dataset_std
dataset_weighed$INTG <- dataset_std$INTG * 5
dataset_weighed$DMNR <- dataset_std$DMNR * 5
# Run the principal component analysis on the weighed dataset
pca1 <- prcomp(dataset_weighed[,-1])
summary(pca1)
pca1$rotation[, 1:3]
factor3 <- factanal(dataset_std[,-1], factors = 3, rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std[-1], factors = 4, rotation = "none");factor4
factanal(dataset_std[,-1], factors = 3, rotation = "varimax", control=list(nstart=100))
# Perform Pricipal Component Analysis on the standardised dataset
pca <- prcomp(dataset_std)
pca
# Get the percentage of variance explained by each component
summary(pca)
pca$rotation[, 1:2]
# Apply weights to INTG and DMNR
dataset_weighed <- dataset_std
dataset_weighed$INTG <- dataset_std$INTG * 5
dataset_weighed$DMNR <- dataset_std$DMNR * 5
# Run the principal component analysis on the weighed dataset
pca1 <- prcomp(dataset_weighed[,-1])
summary(pca1)
pca1$rotation[, 1:3]
factor3 <- factanal(dataset_std[,-1], factors = 3, rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std[-1], factors = 4, rotation = "none");factor4
factanal(dataset_std[,-1], factors = 3, rotation = "varimax", control=list(nstart=100))
factor4 <- factanal(dataset_std, factors = 4, rotation = "none");factor4
factanal(dataset_std[,-1], factors = 3, rotation = "varimax", control=list(nstart=100))
factanal(dataset_std, factors = 3, rotation = "varimax", control=list(nstart=100))
# Run the principal component analysis on the weighed dataset
pca1 <- prcomp(dataset_weighed)
summary(pca1)
pca1$rotation[, 1:3]
factor3 <- factanal(dataset_std, factors = 3, rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std, factors = 4, rotation = "none");factor4
factor5 <- factanal(dataset_std, factors = 5, rotation = "none");factor5
factor3 <- factanal(dataset_std, factors = 3, rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std, factors = 4, rotation = "none");factor4
factor3_rotate <- factanal(dataset_std, factors = 3, rotation = "varimax", control=list(nstart=100))
factor3_rotate <- factanal(dataset_std, factors = 3, rotation = "varimax", control=list(nstart=100)); factor3_rotate
fa <- factanal(dataset_std, factors = 2, rotation = "none"); fa
fa <- factanal(dataset_std, factors = 2, rotation = "none", control=list(nstart=100)); fa
fa$loadings
factor3$loadings
factor3$correlation
fa$correlation
fa$correlation
plot(fa$correlation)
biplot(factor3$scores, factor3$loadings)
factor3 <- factanal(dataset_std, factors = 3, rotation = "none", control=list(nstart=100));factor3
factor3$STATISTIC
factor3$scores
biplot(factor3)
factor3 <- factanal(dataset_std, factors = 3, scores= "regression",
rotation = "none", control=list(nstart=100));factor3
factor4 <- factanal(dataset_std, factors = 4, scores = "regression", rotation = "none");factor4
biplot(factor3$scores, factor3$loadings)
factor3_rotate <- factanal(dataset_std, factors = 3, rotation = "varimax", scores = "regression", control=list(nstart=100)); factor3_rotate
biplot(factor3_rotate$scores, factor3_rotate$loadings)
cor(factor3$loadings, pca$rotation)
cor(factor3$loadings[,1:2], pca$rotation[,1:2])
cor(factor3$loadings, pca$rotation)
cbind(factor3$loadings, pca$rotation)
cbind(factor3$loadings[,1:2], pca$rotation[,1:2])
cor(factor3$loadings[, 1:2], pca$rotation[, 1:2])
View(dataset)
